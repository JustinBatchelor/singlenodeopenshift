---
- name: task to get all storage pools
  community.libvirt.virt_pool:
    command: list_pools
    name: '*'
  register: pools

- debug:
    msg: "{{ pools }}"

- name: task to create storage pool if it does not exist
  community.libvirt.virt_pool:
    command: define
    name: "{{ storage_pool_name }}"
    xml: '{{ lookup("template", "templates/storagePool.xml.j2") }}'
  when: storage_pool_name not in pools.list_pools

# Gather facts about storage pools
# Facts will be available as 'ansible_libvirt_pools'
- name: Gather facts about storage pools
  community.libvirt.virt_pool:
    command: facts

- debug:
    msg: "{{ ansible_libvirt_pools }}"

- name: task to start storage pool if it does not already exist
  community.libvirt.virt_pool:
    command: create
    name: "{{ storage_pool_name }}"
  when: 'ansible_libvirt_pools[storage_pool_name]["state"] == "inactive"'

- name: get volume status
  ansible.builtin.stat:
    path: "{{ storagePool[storage_pool_name]['path'] }}{{ storagePool[storage_pool_name]['volume']['name'] }}"
  register: volume_status

- name: ensure volume with {{ storage }} GB exists
  ansible.builtin.command:
    cmd: "qemu-img create -f qcow2 {{ storagePool[storage_pool_name]['volume']['name'] }} {{ storage }}G"
    chdir: "{{ storagePool[storage_pool_name]['path'] }}"
  register: qemu_results
  when: volume_status.stat.exists == false

- debug:
    msg: "{{ qemu_results.stdout_lines }}"
  when: debug_mode == true and volume_status.stat.exists == false

- name: task to refresh the pool
  community.libvirt.virt_pool:
    name: "{{ storage_pool_name }}"
    command: refresh